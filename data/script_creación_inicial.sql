USE GD1C2024
GO

--CREACION DE SCHEMA--------------------------------
IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'LAMBDA')
BEGIN
    EXEC('CREATE SCHEMA LAMBDA');
END;
GO
--DROP DE TABLAS-----------------
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Envio' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Envio;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Estado' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Estado;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Pago_Tarjeta' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Pago_Tarjeta;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Pago' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Pago;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Cliente' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Cliente;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Descuento' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Descuento;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Medio_Pago' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Medio_Pago;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Promo_Aplicada' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Promo_Aplicada;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Promo_Producto' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Promo_Producto;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Regla' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Regla;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Promocion' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Promocion;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Ticket_Detalle' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Ticket_Detalle;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Ticket' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Ticket;
	
IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto_Marca' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Producto_Marca;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto_Categoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Producto_Categoria;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto_SubCategoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Producto_SubCategoria;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Producto;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Caja' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Caja;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Categoria_SubCategoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Categoria_SubCategoria;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Categoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Categoria;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'SubCategoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.SubCategoria;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Empleado' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Empleado;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Marca' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Marca;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Sucursal' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Sucursal;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Super' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Super;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Localidad' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Localidad;

IF EXISTS (SELECT * FROM sys.tables WHERE name = 'Provincia' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
    DROP TABLE LAMBDA.Provincia;

GO

--CREACION DE TABLAS--------------------------------
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Localidad' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Localidad (
    LOCALIDAD_CODIGO INT IDENTITY PRIMARY KEY,
    LOCALIDAD_NOMBRE NVARCHAR(255)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Provincia' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Provincia (
    PROVINCIA_CODIGO INT IDENTITY PRIMARY KEY,
    PROVINCIA_NOMBRE NVARCHAR(255)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Super' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Super (
    SUPER_CUIT NVARCHAR(255) PRIMARY KEY,
    SUPER_RAZON_SOC NVARCHAR(255),
    SUPER_NOMBRE NVARCHAR(255),
    SUPER_IIBB NVARCHAR(255),
    SUPER_DOMICILIO NVARCHAR(255),
    SUPER_FECHA_INI_ACTIVIDAD DATETIME,
    SUPER_CONDICION_FISCAL NVARCHAR(255),
    SUPER_LOCALIDAD INT REFERENCES LAMBDA.Localidad NOT NULL,
    SUPER_PROVINCIA INT REFERENCES LAMBDA.Provincia NOT NULL
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Sucursal' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Sucursal (
    SUCURSAL_NOMBRE DECIMAL(18,0) PRIMARY KEY,
    SUCURSAL_DIRECCION NVARCHAR(255),
    SUCURSAL_LOCALIDAD INT REFERENCES LAMBDA.Localidad NOT NULL,
    SUCURSAL_PROVINCIA INT REFERENCES LAMBDA.Provincia NOT NULL,
    SUCURSAL_SUPER NVARCHAR(255) REFERENCES LAMBDA.Super NOT NULL
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Empleado' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Empleado (
    EMPLEADO_LEGAJO DECIMAL(18,0) IDENTITY PRIMARY KEY,
    EMPLEADO_NOMBRE NVARCHAR(255),
    EMPLEADO_APELLIDO NVARCHAR(255),
    EMPLEADO_DNI DECIMAL(18,0),
    EMPLEADO_FECHA_REGISTRO DATETIME,
    EMPLEADO_TELEFONO DECIMAL(18,0),
    EMPLEADO_MAIL NVARCHAR(255),
    EMPLEADO_FECHA_NACIMIENTO DATE,
	EMPLEADO_SUCURSAL DECIMAL(18,0) REFERENCES LAMBDA.Sucursal NOT NULL
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Caja' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Caja (
    CAJA_NUMERO DECIMAL(18,0),
    CAJA_TIPO NVARCHAR(255),
    CAJA_SUCURSAL DECIMAL(18,0) REFERENCES LAMBDA.Sucursal NOT NULL,
	PRIMARY KEY (CAJA_NUMERO, CAJA_SUCURSAL)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Ticket' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Ticket (
    TICKET_NUMERO DECIMAL(18,0),
	TICKET_SUCURSAL DECIMAL(18,0) REFERENCES LAMBDA.Sucursal NOT NULL,
    TICKET_TIPO_COMPROBANTE NVARCHAR(255),
	TICKET_CAJA_NUMERO DECIMAL(18,0),
    TICKET_FECHA_HORA DATETIME,
    TICKET_SUBTOTAL_PRODUCTOS DECIMAL(18,2),
    TICKET_TOTAL_DESCUENTO_APLICADO DECIMAL(18,2),
    TICKET_TOTAL_DESCUENTO_APLICADO_MP DECIMAL(18,2),
    TICKET_TOTAL_ENVIO DECIMAL(18,2),
    TICKET_TOTAL_TICKET DECIMAL(18,2),
	TICKET_EMPLEADO DECIMAL(18,0) REFERENCES LAMBDA.Empleado NULL,
	PRIMARY KEY(TICKET_NUMERO,TICKET_SUCURSAL,TICKET_TIPO_COMPROBANTE, TICKET_CAJA_NUMERO),
	FOREIGN KEY (TICKET_CAJA_NUMERO,TICKET_SUCURSAL) REFERENCES LAMBDA.Caja
	
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Cliente' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Cliente (
    CLIENTE_CODIGO DECIMAL(18,0) IDENTITY PRIMARY KEY,
    CLIENTE_NOMBRE NVARCHAR(255),
    CLIENTE_APELLIDO NVARCHAR(255),
    CLIENTE_DNI DECIMAL(18,0),
    CLIENTE_FECHA_REGISTRO DATETIME,
    CLIENTE_TELEFONO DECIMAL(18,0),
    CLIENTE_MAIL NVARCHAR(255),
    CLIENTE_FECHA_NACIMIENTO DATE,
    CLIENTE_DOMICILIO NVARCHAR(255),
    CLIENTE_LOCALIDAD INT REFERENCES LAMBDA.Localidad NOT NULL,
    CLIENTE_PROVINCIA INT REFERENCES LAMBDA.Provincia NOT NULL
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Estado' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Estado (
    ESTADO_CODIGO INT IDENTITY PRIMARY KEY,
    ESTADO_DETALLE NVARCHAR(255)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Envio' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Envio (
    ENVIO_TICKET_NUMERO DECIMAL(18,0) NOT NULL,
    ENVIO_TICKET_SUCURSAL DECIMAL(18,0) NOT NULL,
    ENVIO_TICKET_COMPROBANTE NVARCHAR(255) NOT NULL,
	ENVIO_TICKET_CAJA DECIMAL(18,0) NOT NULL,
	ENVIO_CLIENTE DECIMAL(18,0) REFERENCES LAMBDA.Cliente NOT NULL,
    ENVIO_ESTADO INT REFERENCES LAMBDA.Estado NOT NULL,
    ENVIO_COSTO DECIMAL(18,2),
    ENVIO_FECHA_PROGRAMADA DATETIME,
    ENVIO_HORA_INICIO DECIMAL(18,0),
    ENVIO_HORA_FIN DECIMAL(18,0),
    ENVIO_FECHA_ENTREGA DATETIME,
	FOREIGN KEY (ENVIO_TICKET_NUMERO,ENVIO_TICKET_SUCURSAL,ENVIO_TICKET_COMPROBANTE,ENVIO_TICKET_CAJA) REFERENCES LAMBDA.Ticket,
	PRIMARY KEY (ENVIO_TICKET_NUMERO,ENVIO_TICKET_SUCURSAL,ENVIO_TICKET_COMPROBANTE,ENVIO_TICKET_CAJA)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Categoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Categoria (
    CATEG_CODIGO DECIMAL(18,0) PRIMARY KEY,
    CATEG_DESCRIPCION DECIMAL(18,0) NULL
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'SubCategoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.SubCategoria (
    SUBCATEG_CODIGO DECIMAL(18,0) PRIMARY KEY,
    CATEG_DESCRIPCION DECIMAL(18,0) NULL
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Categoria_SubCategoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Categoria_SubCategoria (
    CATEG_PADRE DECIMAL(18,0) REFERENCES LAMBDA.Categoria NOT NULL,
    CATEG_HIJA DECIMAL(18,0) REFERENCES LAMBDA.SubCategoria NOT NULL,
	PRIMARY KEY(CATEG_PADRE,CATEG_HIJA)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Producto (
    PRODUCTO_NOMBRE NVARCHAR(255) PRIMARY KEY,
    PRODUCTO_DESCRIPCION NVARCHAR(255)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto_Categoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Producto_Categoria (
    PRODUCTO_NOMBRE NVARCHAR(255) REFERENCES LAMBDA.Producto,
    PRODUCTO_CATEGORIA DECIMAL(18,0) REFERENCES LAMBDA.Categoria
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto_SubCategoria' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Producto_SubCategoria (
    PRODUCTO_NOMBRE NVARCHAR(255) REFERENCES LAMBDA.Producto,
    PRODUCTO_SUBCATEGORIA DECIMAL(18,0) REFERENCES LAMBDA.SubCategoria
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Marca' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Marca (
    MARCA_CODIGO NVARCHAR(255) PRIMARY KEY,
    MARCA_DETALLE NVARCHAR(255)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Producto_Marca' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Producto_Marca (
    PRODUCTO_CODIGO DECIMAL(18,0) IDENTITY PRIMARY KEY,
    PRODUCTO_NOMBRE NVARCHAR(255) REFERENCES LAMBDA.Producto,
    PRODUCTO_MARCA NVARCHAR(255) REFERENCES LAMBDA.Marca,
    PRODUCTO_PRECIO DECIMAL(18,2)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Ticket_Detalle' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Ticket_Detalle (
    TICKET_DET_NUMERO DECIMAL(18,0) NOT NULL,
    TICKET_DET_SUCURSAL DECIMAL(18,0) NOT NULL,
    TICKET_DET_COMPROBANTE NVARCHAR(255) NOT NULL,
	TICKET_DET_CAJA DECIMAL(18,0) NOT NULL,
	PRODUCTO_CODIGO DECIMAL(18,0) REFERENCES LAMBDA.Producto_Marca NOT NULL,
	TICKET_DET_CANTIDAD DECIMAL(18,0),
	TICKET_DET_PRECIO DECIMAL(18,2),
	TICKET_DET_TOTAL DECIMAL(18,2),
	FOREIGN KEY (TICKET_DET_NUMERO,TICKET_DET_SUCURSAL,TICKET_DET_COMPROBANTE,TICKET_DET_CAJA) REFERENCES LAMBDA.Ticket,
	PRIMARY KEY (TICKET_DET_NUMERO,TICKET_DET_SUCURSAL,TICKET_DET_COMPROBANTE,TICKET_DET_CAJA,PRODUCTO_CODIGO)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Promocion' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Promocion (
    PROMO_CODIGO DECIMAL(18,0) PRIMARY KEY,
    PROMOCION_DESCRIPCION NVARCHAR(255),
	PROMOCION_FECHA_INICIO DATETIME,
	PROMOCION_FECHA_FIN DATETIME,
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Regla' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Regla (
    REGLA_NUMERO INT IDENTITY PRIMARY KEY,
    REGLA_DESCRIPCION NVARCHAR(255),
	REGLA_DESCUENTO_APLICABLE_PROD DECIMAL(18,2),
	REGLA_CANT_APLICABLE_REGLA DECIMAL(18,0),
	REGLA_CANT_APLICA_DESCUENTO DECIMAL(18,0),
	REGLA_CANT_MAX_PROD DECIMAL(18,0),
	REGLA_APLICA_MISMA_MARCA DECIMAL(18,0),
	REGLA_APLICA_MISMO_PROD DECIMAL(18,0),
	REGLA_PROMOCION DECIMAL(18,0) REFERENCES LAMBDA.Promocion
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Promo_Producto' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Promo_Producto (
	PRODUCTO_CODIGO DECIMAL (18,0) REFERENCES LAMBDA.Producto_Marca,
    PROMO_CODIGO DECIMAL(18,0) REFERENCES LAMBDA.Promocion
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Promo_Aplicada' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Promo_Aplicada (
    TICKET_NUMERO DECIMAL(18,0) NOT NULL,
    TICKET_SUCURSAL DECIMAL(18,0) NOT NULL,
    TICKET_TIPO_COMPROBANTE NVARCHAR(255) NOT NULL,
	TICKET_CAJA DECIMAL(18,0) NOT NULL,
	TICKET_PRODUCTO DECIMAL(18,0) REFERENCES LAMBDA.Producto_Marca NOT NULL,
    PROMO_APLICADA DECIMAL(18,0) REFERENCES LAMBDA.Promocion NOT NULL,
	PROMO_APLICADA_DESCUENTO DECIMAL(18,2),
	FOREIGN KEY (TICKET_NUMERO,TICKET_SUCURSAL,TICKET_TIPO_COMPROBANTE,TICKET_CAJA,TICKET_PRODUCTO) REFERENCES LAMBDA.Ticket_Detalle,
	PRIMARY KEY (TICKET_NUMERO,TICKET_SUCURSAL,TICKET_TIPO_COMPROBANTE,TICKET_CAJA,TICKET_PRODUCTO,PROMO_APLICADA)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Medio_Pago' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Medio_Pago (
    MP_CODIGO INT IDENTITY PRIMARY KEY,
    MP_DETALLE NVARCHAR(255),
    MP_TIPO NVARCHAR(255)
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Descuento' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Descuento (
    DESCUENTO_CODIGO DECIMAL(18,0) PRIMARY KEY,
    DESCUENTO_DESCRIPCION NVARCHAR(255),
    DESCUENTO_FECHA_INICIO DATETIME,
    DESCUENTO_FECHA_FIN DATETIME,
    DESCUENTO_PORCENTAJE_DESC DECIMAL(18,2),
    DESCUENTO_TOPE DECIMAL(18,2),
    DESCUENTO_MEDIO_PAGO INT REFERENCES LAMBDA.Medio_Pago
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Pago' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Pago (
	PAGO_NUMERO DECIMAL(18,0) IDENTITY PRIMARY KEY,
    PAGO_FECHA DATETIME,
    PAGO_IMPORTE DECIMAL(18,2),
    PAGO_DESCUENTO_APLICADO DECIMAL(18,2),
    PAGO_TICKET_NUMERO DECIMAL(18,0) NOT NULL,
    PAGO_TICKET_SUCURSAL DECIMAL(18,0) NOT NULL,
    PAGO_TICKET_COMPROBANTE NVARCHAR(255) NOT NULL,
	PAGO_TICKET_CAJA DECIMAL(18,0) NOT NULL,
    PAGO_MEDIO_PAGO INT REFERENCES LAMBDA.Medio_Pago,
    PAGO_DESCUENTO DECIMAL(18,0) REFERENCES LAMBDA.Descuento,
	FOREIGN KEY (PAGO_TICKET_NUMERO,PAGO_TICKET_SUCURSAL,PAGO_TICKET_COMPROBANTE,PAGO_TICKET_CAJA) REFERENCES LAMBDA.Ticket
);

IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Pago_Tarjeta' AND SCHEMA_NAME(schema_id) = 'LAMBDA')
CREATE TABLE LAMBDA.Pago_Tarjeta (
    PAGO_NUMERO DECIMAL(18,0) NOT NULL,
    PAGO_TARJETA_NRO NVARCHAR(50),
    PAGO_TARJETA_FECHA_VENC DATETIME,
    PAGO_TARJETA_CUOTAS DECIMAL(18,0),
    PAGO_CLIENTE DECIMAL(18,0) REFERENCES LAMBDA.Cliente,
	FOREIGN KEY (PAGO_NUMERO) REFERENCES LAMBDA.Pago,
	PRIMARY KEY (PAGO_NUMERO)
);
GO
--CREACION DE STORED PROCEDURES PARA MIGRACION-------------------------

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_localidades')
	DROP PROCEDURE migrar_localidades
GO
CREATE PROCEDURE migrar_localidades
 AS
  BEGIN
    INSERT INTO LAMBDA.Localidad(LOCALIDAD_NOMBRE)
    SELECT DISTINCT localidad
    FROM (
        SELECT SUCURSAL_LOCALIDAD AS localidad
        FROM gd_esquema.Maestra
        WHERE SUCURSAL_LOCALIDAD IS NOT NULL

        UNION

        SELECT CLIENTE_LOCALIDAD AS localidad
        FROM gd_esquema.Maestra
        WHERE CLIENTE_LOCALIDAD IS NOT NULL

        UNION

        SELECT SUPER_LOCALIDAD AS localidad
        FROM gd_esquema.Maestra
        WHERE SUPER_LOCALIDAD IS NOT NULL
    ) AS combined_localidades
    WHERE localidad NOT IN (SELECT LOCALIDAD_NOMBRE FROM LAMBDA.Localidad);
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_provincias')
	DROP PROCEDURE migrar_provincias
GO
CREATE PROCEDURE migrar_provincias
 AS
  BEGIN
    INSERT INTO LAMBDA.Provincia(PROVINCIA_NOMBRE)
    SELECT DISTINCT provincia
    FROM (
        SELECT SUCURSAL_PROVINCIA AS provincia
        FROM gd_esquema.Maestra
        WHERE SUCURSAL_PROVINCIA IS NOT NULL

        UNION

        SELECT CLIENTE_PROVINCIA AS provincia
        FROM gd_esquema.Maestra
        WHERE CLIENTE_PROVINCIA IS NOT NULL

        UNION

        SELECT SUPER_PROVINCIA AS provincia
        FROM gd_esquema.Maestra
        WHERE SUPER_PROVINCIA IS NOT NULL
    ) AS provincias_totales
    WHERE provincia NOT IN (SELECT PROVINCIA_NOMBRE FROM LAMBDA.Provincia);
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_supers')
	DROP PROCEDURE migrar_supers
GO
CREATE PROCEDURE migrar_supers
 AS
  BEGIN
    INSERT INTO LAMBDA.Super(SUPER_CUIT, SUPER_RAZON_SOC, SUPER_NOMBRE, SUPER_IIBB, SUPER_DOMICILIO, SUPER_FECHA_INI_ACTIVIDAD, SUPER_CONDICION_FISCAL, SUPER_LOCALIDAD, SUPER_PROVINCIA)
	SELECT DISTINCT SUPER_CUIT, SUPER_RAZON_SOC, SUPER_NOMBRE, SUPER_IIBB, SUPER_DOMICILIO, SUPER_FECHA_INI_ACTIVIDAD, SUPER_CONDICION_FISCAL, LOCALIDAD_CODIGO, PROVINCIA_CODIGO
	FROM gd_esquema.Maestra JOIN LAMBDA.Localidad ON SUPER_LOCALIDAD = LOCALIDAD_NOMBRE
							JOIN LAMBDA.Provincia ON SUPER_PROVINCIA = PROVINCIA_NOMBRE
	WHERE SUPER_CUIT IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_sucursales')
	DROP PROCEDURE migrar_sucursales
GO
CREATE PROCEDURE migrar_sucursales
 AS
  BEGIN
    INSERT INTO LAMBDA.Sucursal(SUCURSAL_NOMBRE, SUCURSAL_DIRECCION, SUCURSAL_LOCALIDAD, SUCURSAL_PROVINCIA, SUCURSAL_SUPER)
	SELECT DISTINCT CAST(REPLACE(SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)), SUCURSAL_DIRECCION, LOCALIDAD_CODIGO, PROVINCIA_CODIGO, SUPER_CUIT
	FROM gd_esquema.Maestra LEFT JOIN LAMBDA.Localidad ON SUCURSAL_LOCALIDAD = LOCALIDAD_NOMBRE
							LEFT JOIN LAMBDA.Provincia ON SUCURSAL_PROVINCIA = PROVINCIA_NOMBRE
	WHERE SUCURSAL_NOMBRE IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_empleados')
	DROP PROCEDURE migrar_empleados
GO
CREATE PROCEDURE migrar_empleados
 AS
  BEGIN
    INSERT INTO LAMBDA.Empleado(EMPLEADO_DNI, EMPLEADO_NOMBRE, EMPLEADO_APELLIDO, EMPLEADO_FECHA_REGISTRO, EMPLEADO_TELEFONO,EMPLEADO_MAIL, EMPLEADO_FECHA_NACIMIENTO, EMPLEADO_SUCURSAL)
	SELECT DISTINCT EMPLEADO_DNI, EMPLEADO_NOMBRE, EMPLEADO_APELLIDO, EMPLEADO_FECHA_REGISTRO, EMPLEADO_TELEFONO,EMPLEADO_MAIL, EMPLEADO_FECHA_NACIMIENTO, CAST(REPLACE(SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0))
	FROM gd_esquema.Maestra
	WHERE EMPLEADO_DNI IS NOT NULL
	ORDER BY EMPLEADO_FECHA_REGISTRO DESC
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_cajas')
	DROP PROCEDURE migrar_cajas
GO
CREATE PROCEDURE migrar_cajas
 AS
	BEGIN
		MERGE INTO LAMBDA.Caja AS target
		USING (
			SELECT DISTINCT 
				CAJA_NUMERO, 
				CAST(REPLACE(SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) AS CAJA_SUCURSAL, 
				CAJA_TIPO
			FROM gd_esquema.Maestra
			WHERE CAJA_NUMERO IS NOT NULL 
			  AND SUCURSAL_NOMBRE IS NOT NULL
		) AS source
		ON (target.CAJA_NUMERO = source.CAJA_NUMERO AND target.CAJA_SUCURSAL = source.CAJA_SUCURSAL)
		WHEN NOT MATCHED BY TARGET THEN
			INSERT (CAJA_NUMERO, CAJA_SUCURSAL, CAJA_TIPO)
			VALUES (source.CAJA_NUMERO, source.CAJA_SUCURSAL, source.CAJA_TIPO);
	END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_estados')
	DROP PROCEDURE migrar_estados
GO
CREATE PROCEDURE migrar_estados
 AS
  BEGIN
    INSERT INTO LAMBDA.Estado(ESTADO_DETALLE)
	SELECT DISTINCT ENVIO_ESTADO
	FROM gd_esquema.Maestra
	WHERE ENVIO_ESTADO IS NOT NULL
  END
GO
IF EXISTS (SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_tickets')
    DROP PROCEDURE migrar_tickets;
GO
CREATE PROCEDURE migrar_tickets
AS
BEGIN
    INSERT INTO LAMBDA.Ticket (
        TICKET_NUMERO, 
        TICKET_SUCURSAL, 
        TICKET_TIPO_COMPROBANTE, 
		TICKET_CAJA_NUMERO,
        TICKET_FECHA_HORA, 
        TICKET_SUBTOTAL_PRODUCTOS, 
        TICKET_TOTAL_DESCUENTO_APLICADO,
        TICKET_TOTAL_DESCUENTO_APLICADO_MP, 
        TICKET_TOTAL_ENVIO, 
        TICKET_TOTAL_TICKET, 
        TICKET_EMPLEADO
    )
    SELECT distinct
        m.TICKET_NUMERO, 
        CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) , 
        m.TICKET_TIPO_COMPROBANTE, 
		m.CAJA_NUMERO, 
        m.TICKET_FECHA_HORA, 
        m.TICKET_SUBTOTAL_PRODUCTOS, 
        m.TICKET_TOTAL_DESCUENTO_APLICADO,
        m.TICKET_TOTAL_DESCUENTO_APLICADO_MP, 
        m.TICKET_TOTAL_ENVIO, 
        m.TICKET_TOTAL_TICKET, 
        e.EMPLEADO_LEGAJO
    FROM gd_esquema.Maestra m 
    LEFT JOIN LAMBDA.Empleado e ON m.EMPLEADO_DNI = e.EMPLEADO_DNI
    WHERE m.TICKET_NUMERO IS NOT NULL AND TICKET_TIPO_COMPROBANTE IS NOT NULL AND m.EMPLEADO_DNI IS NOT NULL and m.TICKET_TOTAL_TICKET is not null AND CAJA_NUMERO IS NOT NULL
END;
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_clientes')
	DROP PROCEDURE migrar_clientes
GO
CREATE PROCEDURE migrar_clientes
 AS
  BEGIN
    INSERT INTO LAMBDA.Cliente(CLIENTE_DNI, CLIENTE_NOMBRE, CLIENTE_APELLIDO, CLIENTE_FECHA_REGISTRO,CLIENTE_TELEFONO, CLIENTE_MAIL, CLIENTE_FECHA_NACIMIENTO,CLIENTE_DOMICILIO,CLIENTE_LOCALIDAD,CLIENTE_PROVINCIA)
	SELECT DISTINCT CLIENTE_DNI, CLIENTE_NOMBRE, CLIENTE_APELLIDO, CLIENTE_FECHA_REGISTRO,CLIENTE_TELEFONO, CLIENTE_MAIL, CLIENTE_FECHA_NACIMIENTO,CLIENTE_DOMICILIO,LOCALIDAD_CODIGO,PROVINCIA_CODIGO
	FROM gd_esquema.Maestra JOIN LAMBDA.Localidad ON CLIENTE_LOCALIDAD = LOCALIDAD_NOMBRE
							JOIN LAMBDA.Provincia ON CLIENTE_PROVINCIA = PROVINCIA_NOMBRE
	WHERE CLIENTE_DNI IS NOT NULL
	ORDER BY CLIENTE_FECHA_REGISTRO ASC
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_envios')
    DROP PROCEDURE migrar_envios
GO
CREATE PROCEDURE migrar_envios
AS
BEGIN
    INSERT INTO LAMBDA.Envio(ENVIO_TICKET_NUMERO,ENVIO_TICKET_SUCURSAL,ENVIO_TICKET_COMPROBANTE,ENVIO_TICKET_CAJA,ENVIO_COSTO, ENVIO_FECHA_PROGRAMADA, ENVIO_HORA_INICIO, ENVIO_HORA_FIN, ENVIO_FECHA_ENTREGA, ENVIO_CLIENTE, ENVIO_ESTADO)
    SELECT m.TICKET_NUMERO,CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)),m.TICKET_TIPO_COMPROBANTE,t.TICKET_CAJA_NUMERO,ENVIO_COSTO, ENVIO_FECHA_PROGRAMADA, ENVIO_HORA_INICIO, ENVIO_HORA_FIN, ENVIO_FECHA_ENTREGA,CLIENTE_CODIGO, ESTADO_CODIGO
    FROM gd_esquema.Maestra m JOIN LAMBDA.Estado e ON m.ENVIO_ESTADO = e.ESTADO_DETALLE
                                JOIN LAMBDA.Cliente c ON m.CLIENTE_DNI = c.CLIENTE_DNI
								JOIN LAMBDA.Ticket t on m.TICKET_NUMERO = t.TICKET_NUMERO and CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) = t.TICKET_SUCURSAL and m.TICKET_TIPO_COMPROBANTE = t.TICKET_TIPO_COMPROBANTE and m.TICKET_FECHA_HORA = t.TICKET_FECHA_HORA
    WHERE ENVIO_FECHA_PROGRAMADA is not null  and m.TICKET_NUMERO IS NOT NULL AND m.SUCURSAL_NOMBRE IS NOT NULL AND m.TICKET_TIPO_COMPROBANTE IS NOT NULL AND t.TICKET_CAJA_NUMERO IS NOT NULL
END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_categorias')
    DROP PROCEDURE migrar_categorias
GO
CREATE PROCEDURE migrar_categorias
AS
BEGIN
    INSERT INTO LAMBDA.Categoria (CATEG_CODIGO)
    SELECT DISTINCT CAST(REPLACE(PRODUCTO_CATEGORIA, 'Categoria N°', '') AS DECIMAL(18,0))
    FROM gd_esquema.Maestra
    WHERE PRODUCTO_CATEGORIA IS NOT NULL;
END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_subcategorias')
    DROP PROCEDURE migrar_subcategorias
GO
CREATE PROCEDURE migrar_subcategorias
AS
BEGIN
    INSERT INTO LAMBDA.SubCategoria(SUBCATEG_CODIGO)
    SELECT DISTINCT CAST(REPLACE(PRODUCTO_SUB_CATEGORIA, 'SubCategoria N°', '') AS DECIMAL(18,0))
    FROM gd_esquema.Maestra
    WHERE PRODUCTO_CATEGORIA IS NOT NULL;
END
GO
IF EXISTS (SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_categorias_subcategorias')
    DROP PROCEDURE migrar_categorias_subcategorias
GO
CREATE PROCEDURE migrar_categorias_subcategorias
AS
BEGIN
    INSERT INTO LAMBDA.Categoria_SubCategoria(CATEG_PADRE, CATEG_HIJA)
    SELECT DISTINCT CAST(REPLACE(PRODUCTO_CATEGORIA, 'Categoria N°', '') AS DECIMAL(18,0)), CAST(REPLACE(PRODUCTO_SUB_CATEGORIA, 'SubCategoria N°', '') AS DECIMAL(18,0))
    FROM gd_esquema.Maestra
    WHERE PRODUCTO_CATEGORIA IS NOT NULL
        AND PRODUCTO_SUB_CATEGORIA IS NOT NULL;
END
GO
IF EXISTS (SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_productos_categorias')
    DROP PROCEDURE migrar_productos_categorias
GO
CREATE PROCEDURE migrar_productos_categorias
AS
BEGIN
    INSERT INTO LAMBDA.Producto_Categoria(PRODUCTO_NOMBRE, PRODUCTO_CATEGORIA)
    SELECT DISTINCT PRODUCTO_NOMBRE, CAST(REPLACE(PRODUCTO_CATEGORIA, 'Categoria N°', '') AS DECIMAL(18,0))
    FROM gd_esquema.Maestra
    WHERE PRODUCTO_NOMBRE IS NOT NULL
        AND PRODUCTO_CATEGORIA IS NOT NULL;
END
GO
IF EXISTS (SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_productos_subcategorias')
    DROP PROCEDURE migrar_productos_subcategorias
GO
CREATE PROCEDURE migrar_productos_subcategorias
AS
BEGIN
    INSERT INTO LAMBDA.Producto_SubCategoria(PRODUCTO_NOMBRE, PRODUCTO_SUBCATEGORIA)
    SELECT DISTINCT PRODUCTO_NOMBRE, CAST(REPLACE(PRODUCTO_SUB_CATEGORIA, 'SubCategoria N°', '') AS DECIMAL(18,0))
    FROM gd_esquema.Maestra
    WHERE PRODUCTO_NOMBRE IS NOT NULL
        AND PRODUCTO_SUB_CATEGORIA IS NOT NULL;
END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_marcas')
	DROP PROCEDURE migrar_marcas
GO
CREATE PROCEDURE migrar_marcas
 AS
  BEGIN
    INSERT INTO LAMBDA.Marca(MARCA_CODIGO)
	SELECT DISTINCT PRODUCTO_MARCA
	FROM gd_esquema.Maestra
	WHERE PRODUCTO_MARCA IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_productos')
	DROP PROCEDURE migrar_productos
GO
CREATE PROCEDURE migrar_productos
 AS
  BEGIN
    INSERT INTO LAMBDA.Producto(PRODUCTO_NOMBRE, PRODUCTO_DESCRIPCION)
	SELECT DISTINCT PRODUCTO_NOMBRE, PRODUCTO_DESCRIPCION
	FROM gd_esquema.Maestra
	WHERE PRODUCTO_NOMBRE IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_productos_marcas')
	DROP PROCEDURE migrar_productos_marcas
GO
CREATE PROCEDURE migrar_productos_marcas
 AS
  BEGIN
    INSERT INTO LAMBDA.Producto_Marca(PRODUCTO_NOMBRE, PRODUCTO_MARCA,PRODUCTO_PRECIO )
	SELECT distinct PRODUCTO_NOMBRE, PRODUCTO_MARCA, max(PRODUCTO_PRECIO)
	FROM gd_esquema.Maestra
	WHERE PRODUCTO_NOMBRE IS NOT NULL and PRODUCTO_MARCA is not null and PRODUCTO_PRECIO is not null
	group by PRODUCTO_NOMBRE, PRODUCTO_MARCA
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_ticket_detalles')
    DROP PROCEDURE migrar_ticket_detalles
GO
CREATE PROCEDURE migrar_ticket_detalles
AS
BEGIN	
    INSERT INTO LAMBDA.Ticket_Detalle(TICKET_DET_NUMERO,TICKET_DET_SUCURSAL,TICKET_DET_COMPROBANTE,TICKET_DET_CAJA,PRODUCTO_CODIGO, TICKET_DET_CANTIDAD,TICKET_DET_PRECIO,TICKET_DET_TOTAL)
    SELECT distinct TICKET_NUMERO, CAST(REPLACE(SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) , TICKET_TIPO_COMPROBANTE, CAJA_NUMERO,pm.PRODUCTO_CODIGO, sum(TICKET_DET_CANTIDAD), avg(TICKET_DET_PRECIO), sum(TICKET_DET_TOTAL)
    FROM gd_esquema.Maestra m JOIN LAMBDA.Producto_Marca pm ON m.PRODUCTO_NOMBRE = pm.PRODUCTO_NOMBRE AND m.PRODUCTO_MARCA = pm.PRODUCTO_MARCA
    WHERE CAJA_NUMERO IS NOT NULL
	GROUP BY TICKET_NUMERO, SUCURSAL_NOMBRE, TICKET_TIPO_COMPROBANTE, CAJA_NUMERO,pm.PRODUCTO_CODIGO
END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_promociones')
	DROP PROCEDURE migrar_promociones
GO
CREATE PROCEDURE migrar_promociones
 AS
  BEGIN
    INSERT INTO LAMBDA.Promocion(PROMO_CODIGO, PROMOCION_DESCRIPCION,PROMOCION_FECHA_INICIO,PROMOCION_FECHA_FIN)
	SELECT DISTINCT PROMO_CODIGO, PROMOCION_DESCRIPCION,PROMOCION_FECHA_INICIO,PROMOCION_FECHA_FIN
	FROM gd_esquema.Maestra
	WHERE PROMO_CODIGO IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_reglas')
	DROP PROCEDURE migrar_reglas
GO
CREATE PROCEDURE migrar_reglas
 AS
  BEGIN
    INSERT INTO LAMBDA.Regla(REGLA_DESCRIPCION,REGLA_DESCUENTO_APLICABLE_PROD,REGLA_CANT_APLICABLE_REGLA,REGLA_CANT_APLICA_DESCUENTO,REGLA_CANT_MAX_PROD,REGLA_APLICA_MISMA_MARCA,REGLA_APLICA_MISMO_PROD,REGLA_PROMOCION)
	SELECT DISTINCT REGLA_DESCRIPCION, REGLA_DESCUENTO_APLICABLE_PROD,REGLA_CANT_APLICABLE_REGLA,REGLA_CANT_APLICA_DESCUENTO,REGLA_CANT_MAX_PROD,REGLA_APLICA_MISMA_MARCA,REGLA_APLICA_MISMO_PROD,PROMO_CODIGO
	FROM gd_esquema.Maestra
	WHERE REGLA_DESCRIPCION IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_promos_productos')
    DROP PROCEDURE migrar_promos_productos
GO
CREATE PROCEDURE migrar_promos_productos
AS
BEGIN
    INSERT INTO LAMBDA.Promo_Producto(PRODUCTO_CODIGO, PROMO_CODIGO)
    SELECT distinct pm.PRODUCTO_CODIGO, PROMO_CODIGO
    FROM gd_esquema.Maestra m JOIN LAMBDA.Producto_Marca pm ON m.PRODUCTO_NOMBRE = pm.PRODUCTO_NOMBRE AND m.PRODUCTO_MARCA = pm.PRODUCTO_MARCA
    WHERE m.PRODUCTO_NOMBRE IS NOT NULL AND m.PRODUCTO_MARCA IS NOT NULL AND PROMO_CODIGO IS NOT NULL
END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_promos_aplicadas')
	DROP PROCEDURE migrar_promos_aplicadas
GO
CREATE PROCEDURE migrar_promos_aplicadas
AS
BEGIN
    INSERT INTO LAMBDA.Promo_Aplicada(TICKET_NUMERO, TICKET_SUCURSAL, TICKET_TIPO_COMPROBANTE, TICKET_CAJA,TICKET_PRODUCTO, PROMO_APLICADA, PROMO_APLICADA_DESCUENTO)
    SELECT DISTINCT TICKET_NUMERO, CAST(REPLACE(SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)), TICKET_TIPO_COMPROBANTE, CAJA_NUMERO, pm.PRODUCTO_CODIGO,PROMO_CODIGO, sum(PROMO_APLICADA_DESCUENTO)
    FROM gd_esquema.Maestra m JOIN LAMBDA.Producto_Marca pm ON m.PRODUCTO_NOMBRE = pm.PRODUCTO_NOMBRE AND m.PRODUCTO_MARCA =pm.PRODUCTO_MARCA
    WHERE CAJA_NUMERO IS NOT NULL AND PROMO_CODIGO IS NOT NULL AND PROMO_APLICADA_DESCUENTO > 0
	group by TICKET_NUMERO, SUCURSAL_NOMBRE, TICKET_TIPO_COMPROBANTE, CAJA_NUMERO, pm.PRODUCTO_CODIGO,PROMO_CODIGO
END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_medios_pago')
	DROP PROCEDURE migrar_medios_pago
GO
CREATE PROCEDURE migrar_medios_pago
 AS
  BEGIN
    INSERT INTO LAMBDA.Medio_Pago(MP_DETALLE,MP_TIPO)
	SELECT DISTINCT PAGO_MEDIO_PAGO, PAGO_TIPO_MEDIO_PAGO
	FROM gd_esquema.Maestra
	WHERE PAGO_MEDIO_PAGO IS NOT NULL
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_descuentos')
	DROP PROCEDURE migrar_descuentos
GO
CREATE PROCEDURE migrar_descuentos
 AS
  BEGIN
    INSERT INTO LAMBDA.Descuento(DESCUENTO_CODIGO,DESCUENTO_DESCRIPCION,DESCUENTO_FECHA_INICIO,DESCUENTO_FECHA_FIN,DESCUENTO_PORCENTAJE_DESC,DESCUENTO_TOPE,DESCUENTO_MEDIO_PAGO)
	SELECT DISTINCT DESCUENTO_CODIGO,DESCUENTO_DESCRIPCION,DESCUENTO_FECHA_INICIO,DESCUENTO_FECHA_FIN,DESCUENTO_PORCENTAJE_DESC,DESCUENTO_TOPE,MP_CODIGO
	FROM gd_esquema.Maestra JOIN LAMBDA.Medio_Pago ON PAGO_MEDIO_PAGO = MP_DETALLE
	WHERE DESCUENTO_CODIGO IS NOT NULL
	ORDER BY DESCUENTO_CODIGO
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_pagos')
	DROP PROCEDURE migrar_pagos
GO
CREATE PROCEDURE migrar_pagos
 AS
  BEGIN
    INSERT INTO LAMBDA.Pago(PAGO_FECHA,PAGO_IMPORTE,PAGO_DESCUENTO_APLICADO,PAGO_MEDIO_PAGO,PAGO_DESCUENTO,PAGO_TICKET_NUMERO,PAGO_TICKET_SUCURSAL,PAGO_TICKET_COMPROBANTE,PAGO_TICKET_CAJA)
	SELECT PAGO_FECHA,PAGO_IMPORTE,PAGO_DESCUENTO_APLICADO,MP_CODIGO,DESCUENTO_CODIGO,m.TICKET_NUMERO,CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) ,m.TICKET_TIPO_COMPROBANTE, t.TICKET_CAJA_NUMERO
	FROM gd_esquema.Maestra m JOIN LAMBDA.Medio_Pago mp ON m.PAGO_MEDIO_PAGO = mp.MP_DETALLE
							  JOIN LAMBDA.Ticket t ON m.TICKET_NUMERO = t.TICKET_NUMERO AND CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) = t.TICKET_SUCURSAL AND m.TICKET_TIPO_COMPROBANTE = t.TICKET_TIPO_COMPROBANTE AND m.TICKET_FECHA_HORA = t.TICKET_FECHA_HORA
	WHERE PAGO_FECHA is not null  and m.TICKET_NUMERO IS NOT NULL AND m.SUCURSAL_NOMBRE IS NOT NULL AND m.TICKET_TIPO_COMPROBANTE IS NOT NULL AND t.TICKET_CAJA_NUMERO IS NOT NULL
	ORDER BY PAGO_FECHA ASC
  END
GO
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'migrar_pagos_tarjetas')
	DROP PROCEDURE migrar_pagos_tarjetas
GO
CREATE PROCEDURE migrar_pagos_tarjetas
AS
BEGIN
    INSERT INTO LAMBDA.Pago_Tarjeta(PAGO_NUMERO, PAGO_TARJETA_NRO, PAGO_TARJETA_FECHA_VENC, PAGO_TARJETA_CUOTAS, PAGO_CLIENTE)
    SELECT p.PAGO_NUMERO,m.PAGO_TARJETA_NRO, m.PAGO_TARJETA_FECHA_VENC,m.PAGO_TARJETA_CUOTAS, c.cliente_codigo
    FROM gd_esquema.Maestra m   JOIN LAMBDA.Ticket t ON m.ticket_numero = t.ticket_numero and CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0))  = t.ticket_sucursal and m.ticket_tipo_comprobante = t.ticket_tipo_comprobante and m.ticket_fecha_hora = t.ticket_fecha_hora
								JOIN gd_esquema.Maestra m2 ON m.ticket_numero = m2.ticket_numero and CAST(REPLACE(m.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) = CAST(REPLACE(m2.SUCURSAL_NOMBRE, 'Sucursal N°:', '') AS DECIMAL(18,0)) and m.ticket_tipo_comprobante = m2.ticket_tipo_comprobante and m.ticket_fecha_hora = m2.ticket_fecha_hora
								join lambda.cliente c on m2.cliente_dni = c.cliente_dni
								JOIN LAMBDA.Pago p ON m.PAGO_FECHA = p.PAGO_FECHA AND m.PAGO_IMPORTE = p.PAGO_IMPORTE
								JOIN LAMBDA.Medio_Pago mp ON m.PAGO_MEDIO_PAGO = mp.MP_DETALLE
    WHERE m.PAGO_TARJETA_NRO IS NOT NULL;
END;
GO
--EJECUCION DE STORED PROCEDURES: MIGRACION-----------------------------
	 BEGIN TRANSACTION
	 BEGIN TRY
		EXECUTE migrar_localidades
		EXECUTE migrar_provincias
		EXECUTE migrar_supers
		EXECUTE migrar_sucursales
		EXECUTE migrar_empleados
		EXECUTE migrar_cajas
		EXECUTE migrar_estados
		EXECUTE migrar_tickets
		EXECUTE migrar_clientes
		EXECUTE migrar_envios
		EXECUTE migrar_categorias
		EXECUTE migrar_subcategorias
		EXECUTE migrar_categorias_subcategorias
		EXECUTE migrar_marcas
		EXECUTE migrar_productos
		EXECUTE migrar_productos_categorias
		EXECUTE migrar_productos_subcategorias
		EXECUTE migrar_productos_marcas
		EXECUTE migrar_promociones
		EXECUTE migrar_reglas
		EXECUTE migrar_promos_productos
		EXECUTE migrar_ticket_detalles
		EXECUTE migrar_promos_aplicadas
		EXECUTE migrar_medios_pago
		EXECUTE migrar_descuentos
		EXECUTE migrar_pagos
		EXECUTE migrar_pagos_tarjetas
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION;
		THROW 50001, 'Error al migrar las tablas, verifique que las nuevas tablas se encuentren vacias o bien ejecute un DROP de todas las nuevas tablas y vuelva a intentarlo.',1;
	END CATCH

   IF (EXISTS (SELECT 1 FROM LAMBDA.Localidad)
   AND EXISTS (SELECT 1 FROM LAMBDA.Provincia)
   AND EXISTS (SELECT 1 FROM LAMBDA.Super)
   AND EXISTS (SELECT 1 FROM LAMBDA.Sucursal)
   AND EXISTS (SELECT 1 FROM LAMBDA.Empleado)
   AND EXISTS (SELECT 1 FROM LAMBDA.Caja)
   AND EXISTS (SELECT 1 FROM LAMBDA.Ticket)
   AND EXISTS (SELECT 1 FROM LAMBDA.Cliente)
   AND EXISTS (SELECT 1 FROM LAMBDA.Estado)
   AND EXISTS (SELECT 1 FROM LAMBDA.Envio)
   AND EXISTS (SELECT 1 FROM LAMBDA.Categoria)
   AND EXISTS (SELECT 1 FROM LAMBDA.SubCategoria)
   AND EXISTS (SELECT 1 FROM LAMBDA.Categoria_SubCategoria)
   AND EXISTS (SELECT 1 FROM LAMBDA.Marca)
   AND EXISTS (SELECT 1 FROM LAMBDA.Producto)
   AND EXISTS (SELECT 1 FROM LAMBDA.Producto_Marca)
   AND EXISTS (SELECT 1 FROM LAMBDA.Producto_Categoria)
   AND EXISTS (SELECT 1 FROM LAMBDA.Producto_SubCategoria)
   AND EXISTS (SELECT 1 FROM LAMBDA.Ticket_Detalle)
   AND EXISTS (SELECT 1 FROM LAMBDA.Promocion)
   AND EXISTS (SELECT 1 FROM LAMBDA.Regla)
   AND EXISTS (SELECT 1 FROM LAMBDA.Promo_Producto)
   AND EXISTS (SELECT 1 FROM LAMBDA.Promo_Aplicada)
   AND EXISTS (SELECT 1 FROM LAMBDA.Medio_Pago)
   AND EXISTS (SELECT 1 FROM LAMBDA.Descuento)   
   AND EXISTS (SELECT 1 FROM LAMBDA.Pago)  
   AND EXISTS (SELECT 1 FROM LAMBDA.Pago_Tarjeta))
   BEGIN
	PRINT 'Tablas migradas correctamente.';
	COMMIT TRANSACTION;
   END
	 ELSE
   BEGIN
    ROLLBACK TRANSACTION;
	THROW 50002, 'Hubo un error al migrar una o mas tablas. No se migro ninguna tabla.',1;
   END

/*
GO

--DROP DE PROCEDURES-------------
DROP PROCEDURE migrar_localidades
DROP PROCEDURE migrar_provincias
DROP PROCEDURE migrar_supers
DROP PROCEDURE migrar_sucursales
DROP PROCEDURE migrar_empleados
DROP PROCEDURE migrar_cajas
DROP PROCEDURE migrar_estados
DROP PROCEDURE migrar_tickets
DROP PROCEDURE migrar_clientes
DROP PROCEDURE migrar_envios
DROP PROCEDURE migrar_categorias
DROP PROCEDURE migrar_subcategorias
DROP PROCEDURE migrar_categorias_subcategorias
DROP PROCEDURE migrar_marcas
DROP PROCEDURE migrar_productos
DROP PROCEDURE migrar_productos_categorias
DROP PROCEDURE migrar_productos_subcategorias
DROP PROCEDURE migrar_productos_marcas
DROP PROCEDURE migrar_promociones
DROP PROCEDURE migrar_reglas
DROP PROCEDURE migrar_promos_productos
DROP PROCEDURE migrar_ticket_detalles
DROP PROCEDURE migrar_promos_aplicadas
DROP PROCEDURE migrar_medios_pago
DROP PROCEDURE migrar_descuentos
DROP PROCEDURE migrar_pagos
DROP PROCEDURE migrar_pagos_tarjetas

--SELECTS PARA PRUEBA DE CREACION/MIGRACION---------------
SELECT * FROM LAMBDA.Localidad 
SELECT * FROM LAMBDA.Provincia 
SELECT * FROM LAMBDA.Super
SELECT * FROM LAMBDA.Sucursal
SELECT * FROM LAMBDA.Empleado
SELECT * FROM LAMBDA.Caja
SELECT * FROM LAMBDA.Ticket
SELECT * FROM LAMBDA.Cliente
SELECT * FROM LAMBDA.Estado
SELECT * FROM LAMBDA.Envio
SELECT * FROM LAMBDA.Categoria
SELECT * FROM LAMBDA.SubCategoria
SELECT * FROM LAMBDA.Categoria_Subcategoria
SELECT * FROM LAMBDA.Marca
SELECT * FROM LAMBDA.Producto
SELECT * FROM LAMBDA.Producto_Marca
SELECT * FROM LAMBDA.Producto_Categoria
SELECT * FROM LAMBDA.Producto_SubCategoria
SELECT * FROM LAMBDA.Ticket_Detalle
SELECT * FROM LAMBDA.Promocion
SELECT * FROM LAMBDA.Regla
SELECT * FROM LAMBDA.Promo_Producto
SELECT * FROM LAMBDA.Promo_Aplicada
SELECT * FROM LAMBDA.Medio_Pago
SELECT * FROM LAMBDA.Descuento
SELECT * FROM LAMBDA.Pago
SELECT * FROM LAMBDA.Pago_Tarjeta*/