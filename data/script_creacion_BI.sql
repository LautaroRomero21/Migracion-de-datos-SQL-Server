USE GD1C2024
GO

--DROP PREVENTIVO DE FUNCIONES------------------------------------------------------------
IF EXISTS(SELECT [name] FROM sys.objects WHERE [name] = 'getAgeRange')
	DROP FUNCTION LAMBDA.getAgeRange

IF EXISTS(SELECT [name] FROM sys.objects WHERE [name] = 'getAge')
	DROP FUNCTION LAMBDA.getAge

IF EXISTS(SELECT [name] FROM sys.objects WHERE [name] = 'getTurn')
	DROP FUNCTION LAMBDA.getTurn

IF EXISTS(SELECT [name] FROM sys.objects WHERE [name] = 'fn_Cuatrimestre')
	DROP FUNCTION LAMBDA.fn_Cuatrimestre

--DROP PREVENTIVO DE TABLAS------------------------------------------------------------
IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_fact_envios')
DROP TABLE  LAMBDA.BI_fact_envios

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_fact_pagos')
DROP TABLE  LAMBDA.BI_fact_pagos

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_fact_descuentos')
DROP TABLE  LAMBDA.BI_fact_descuentos

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_fact_ventas')
DROP TABLE  LAMBDA.BI_fact_ventas

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_clientes')
DROP TABLE  LAMBDA.BI_dim_clientes

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_tiempos')
DROP TABLE  LAMBDA.BI_dim_tiempos

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_cajas')
DROP TABLE  LAMBDA.BI_dim_cajas

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_sucursales')
DROP TABLE  LAMBDA.BI_dim_sucursales

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_localidades')
DROP TABLE  LAMBDA.BI_dim_localidades

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_provincias')
DROP TABLE  LAMBDA.BI_dim_provincias

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_rangos_etarios')
DROP TABLE  LAMBDA.BI_dim_rangos_etarios

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_turnos')
DROP TABLE  LAMBDA.BI_dim_turnos

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_medios_pago')
DROP TABLE  LAMBDA.BI_dim_medios_pago

IF EXISTS(SELECT [name] FROM sys.tables WHERE [name] = 'BI_dim_categorias')
DROP TABLE  LAMBDA.BI_dim_categorias

--DROP PREVENTIVO DE PROCEDURES---------------------------------------------------------------
IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_tiempos')
DROP PROCEDURE LAMBDA.BI_migrar_tiempos

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_sucursales')
DROP PROCEDURE LAMBDA.BI_migrar_sucursales

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_cajas')
DROP PROCEDURE LAMBDA.BI_migrar_cajas

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_localidades')
DROP PROCEDURE LAMBDA.BI_migrar_localidades

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_provincias')
DROP PROCEDURE LAMBDA.BI_migrar_provincias

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_clientes')
DROP PROCEDURE LAMBDA.BI_migrar_clientes

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_rangos_etarios')
DROP PROCEDURE LAMBDA.BI_migrar_rangos_etarios

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_turnos')
DROP PROCEDURE LAMBDA.BI_migrar_turnos

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_medios_pago')
DROP PROCEDURE LAMBDA.BI_migrar_medios_pago

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_categorias')
DROP PROCEDURE LAMBDA.BI_migrar_categorias

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_ventas')
DROP PROCEDURE LAMBDA.BI_migrar_ventas

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_envios')
DROP PROCEDURE LAMBDA.BI_migrar_envios

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_pagos')
DROP PROCEDURE LAMBDA.BI_migrar_pagos

IF EXISTS(SELECT [name] FROM sys.procedures WHERE [name] = 'BI_migrar_descuentos')
DROP PROCEDURE LAMBDA.BI_migrar_descuentos

--DROP PREVENTIVO DE VISTAS-------------------------------------------------------------------
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_TicketPromedioMensual')
DROP VIEW LAMBDA.v_TicketPromedioMensual
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_cantUnidadesPromedio')
DROP VIEW LAMBDA.v_cantUnidadesPromedio
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_porcVentasxEdad')
DROP VIEW LAMBDA.v_porcVentasxEdad
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_cantVentasTurnoLocalidad') 
DROP VIEW LAMBDA.v_cantVentasTurnoLocalidad
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_porcentajeDescuentoMes')
DROP VIEW LAMBDA.v_porcentajeDescuentoMes
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_top3CategsProdsMayorDesc') 
DROP VIEW LAMBDA.v_top3CategsProdsMayorDesc
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_porcEnviosCumplidos')
DROP VIEW LAMBDA.v_porcEnviosCumplidos
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_cantEnvRangoEtCuatriAño') 
DROP VIEW LAMBDA.v_cantEnvRangoEtCuatriAño
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_top5LocalidadesEnvioCaro') 
DROP VIEW LAMBDA.v_top5LocalidadesEnvioCaro
GO
IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_top3SucursalesMayorPagoCuotas') 
DROP VIEW LAMBDA.v_top3SucursalesMayorPagoCuotas

IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_promedioCuotaEdadCliente') 
DROP VIEW LAMBDA.v_promedioCuotaEdadCliente

IF EXISTS (SELECT name FROM sys.objects WHERE name = 'v_descApliPorMedioPago') 
DROP VIEW LAMBDA.v_descApliPorMedioPago
GO 

--CREACIÓN DE FUNCIONES AUXILIARES------------------------------------------------------------
CREATE FUNCTION LAMBDA.getAge(@dateofbirth date) --Recibe una fecha de nacimiento por parámetro
RETURNS int										 --y devuelve la edad actual de la persona.
AS
BEGIN
	DECLARE @age int;
	
	IF (MONTH(@dateofbirth)!=MONTH(GETDATE()))
		SET @age = DATEDIFF(MONTH, @dateofbirth, GETDATE())/12;
	ELSE IF(DAY(@dateofbirth) > DAY(GETDATE()))
		SET @age = (DATEDIFF(MONTH, @dateofbirth, GETDATE())/12)-1;
	ELSE 
	BEGIN
		SET @age = DATEDIFF(MONTH, @dateofbirth, GETDATE())/12;
	END
		RETURN @age;
	END
GO
CREATE FUNCTION LAMBDA.getAgeRange (@age int) --Recibe una edad por parámetro y 
RETURNS int							  --devuelve el rango de edad al que pertenece.	
AS
BEGIN
	DECLARE @returnvalue int;

	IF (@age < 25)
	BEGIN
		SET @returnvalue = 1;
	END
	IF (@age >= 25 AND @age <=35)
	BEGIN
		SET @returnvalue = 2;
	END
	ELSE IF (@age > 35 AND @age <=50)
	BEGIN
		SET @returnvalue =3;
	END
	ELSE IF(@age > 50)
	BEGIN
		SET @returnvalue = 4;
	END

	RETURN @returnvalue;
END
GO
CREATE FUNCTION LAMBDA.getTurn (@FechaHora datetime)--Recibe una fecha y devuelve el codigo de turno al que pertenece.	
RETURNS INT
AS
BEGIN
    DECLARE @Turno INT;
    
    SET @Turno = CASE
                    WHEN DATEPART(HOUR, @FechaHora) BETWEEN 8 AND 11 THEN 1  -- 08:00 - 12:00
                    WHEN DATEPART(HOUR, @FechaHora) BETWEEN 12 AND 15 THEN 2 -- 12:00 - 16:00
                    WHEN DATEPART(HOUR, @FechaHora) BETWEEN 16 AND 19 THEN 3 -- 16:00 - 20:00
                    ELSE 4 -- Otra hora 
                 END;
    RETURN @Turno;
END;
GO
CREATE FUNCTION LAMBDA.fn_Cuatrimestre (@Fecha DATETIME)
RETURNS INT
AS
BEGIN
    DECLARE @Cuatrimestre INT;
    SET @Cuatrimestre = CASE 
        WHEN MONTH(@Fecha) IN (1, 2, 3, 4) THEN 1
        WHEN MONTH(@Fecha) IN (5,6, 7, 8) THEN 2
        WHEN MONTH(@Fecha) IN (9,10,11,12) THEN 3
    END;
    RETURN @Cuatrimestre;
END;
GO

--CREACIÓN DE TABLAS DIMENSIONALES------------------------------------------------------------
CREATE TABLE LAMBDA.BI_dim_tiempos(
CODIGO_TIEMPO int IDENTITY PRIMARY KEY,
AÑO int,
CUATRIMESTRE int,
MES int
);

CREATE TABLE LAMBDA.BI_dim_localidades(
CODIGO_LOCALIDAD int IDENTITY PRIMARY KEY,
LOCALIDAD nvarchar(255) null
);

CREATE TABLE LAMBDA.BI_dim_provincias(
CODIGO_PROVINCIA int IDENTITY PRIMARY KEY,
PROVINCIA nvarchar(255) null
);

CREATE TABLE LAMBDA.BI_dim_sucursales(
CODIGO_SUCURSAL DECIMAL(18,0) PRIMARY KEY,
DIRECCION nvarchar(255) not null,
LOCALIDAD INT REFERENCES LAMBDA.BI_dim_localidades,
PROVINCIA INT REFERENCES LAMBDA.BI_dim_provincias
);
CREATE TABLE LAMBDA.BI_dim_cajas(
    CAJA_NUMERO DECIMAL(18,0),
    CAJA_TIPO NVARCHAR(255),
    CAJA_SUCURSAL DECIMAL(18,0) REFERENCES LAMBDA.BI_dim_sucursales NOT NULL,
	PRIMARY KEY (CAJA_NUMERO, CAJA_SUCURSAL)
);
CREATE TABLE LAMBDA.BI_dim_clientes (
    CODIGO DECIMAL(18,0) IDENTITY PRIMARY KEY,
    NOMBRE NVARCHAR(255),
    APELLIDO NVARCHAR(255),
    DNI DECIMAL(18,0),
    FECHA_REGISTRO DATETIME,
    TELEFONO DECIMAL(18,0),
    MAIL NVARCHAR(255),
    FECHA_NACIMIENTO DATE,
    DOMICILIO NVARCHAR(255),
    LOCALIDAD INT REFERENCES LAMBDA.BI_dim_localidades NOT NULL,
    PROVINCIA INT REFERENCES LAMBDA.BI_dim_provincias NOT NULL
);

CREATE TABLE  LAMBDA.BI_dim_rangos_etarios(
CODIGO_RANGO int IDENTITY PRIMARY KEY,
RANGO_DETALLE nvarchar(50) null
);

CREATE TABLE  LAMBDA.BI_dim_turnos(
CODIGO_TURNO int IDENTITY PRIMARY KEY,
TURNO_DETALLE NVARCHAR(50) null,
);

CREATE TABLE  LAMBDA.BI_dim_medios_pago(
MP_CODIGO INT IDENTITY PRIMARY KEY,
MP_DETALLE NVARCHAR(255),
MP_TIPO NVARCHAR(255)
);
CREATE TABLE LAMBDA.BI_dim_categorias (
    CATEG_CODIGO DECIMAL(18,0) PRIMARY KEY,
    CATEG_DESCRIPCION DECIMAL(18,0) NULL
);

--CREACIÓN DE TABLAS FÁCTICAS------------------------------------------------------------
CREATE TABLE LAMBDA.BI_fact_ventas (
	SUCURSAL DECIMAL(18,0) REFERENCES LAMBDA.BI_dim_sucursales NOT NULL,
	TIEMPO INT REFERENCES LAMBDA.BI_dim_tiempos,
	TURNO INT REFERENCES LAMBDA.BI_dim_turnos,
	CAJA_NUMERO DECIMAL(18,0),
	RANGO_ETARIO_EMPLEADO INT REFERENCES LAMBDA.BI_dim_rangos_etarios,
	CANTIDAD_TOTAL_VENTAS DECIMAL(18,0),
	PROMEDIO_CANTIDAD_PRODUCTOS DECIMAL(18,2),
	PROMEDIO_PRECIO_VENTAS DECIMAL(18,2),
	foreign key (CAJA_NUMERO,SUCURSAL) REFERENCES LAMBDA.BI_dim_cajas
);
GO
CREATE TABLE LAMBDA.BI_fact_envios (
	SUCURSAL DECIMAL(18,0) REFERENCES LAMBDA.BI_dim_sucursales NOT NULL,
	TIEMPO INT REFERENCES LAMBDA.BI_dim_tiempos,
	RANGO_ETARIO_CLIENTES INT REFERENCES LAMBDA.BI_dim_rangos_etarios NOT NULL,
	CLIENTE DECIMAL(18,0) REFERENCES LAMBDA.BI_dim_clientes NOT NULL,
    PORCENTAJE_ENVIOS_CUMPLIDOS DECIMAL(18,0),
	CANT_TOTAL_ENVIOS DECIMAL(18,0),
    COSTO_TOTAL_ENVIOS DECIMAL(18,2)
);
GO
CREATE TABLE LAMBDA.BI_fact_pagos (
    SUCURSAL DECIMAL(18,0) NOT NULL,
    MEDIO_PAGO INT REFERENCES LAMBDA.BI_dim_medios_pago NOT NULL,
	TIEMPO INT REFERENCES LAMBDA.BI_dim_tiempos,
	RANGO_ETARIO_CLIENTES INT REFERENCES LAMBDA.BI_dim_rangos_etarios NOT NULL,
	IMPORTE_TOTAL_CUOTAS decimal(18,2),
	PROMEDIO_IMPORTE_CUOTAS decimal(18,2)
);
GO
CREATE TABLE LAMBDA.BI_fact_descuentos (
	TIEMPO INT REFERENCES LAMBDA.BI_dim_tiempos,
    CATEGORIA decimal(18,0) REFERENCES LAMBDA.BI_dim_categorias NOT NULL,
    MEDIO_PAGO INT REFERENCES LAMBDA.BI_dim_medios_pago NOT NULL,
	PORCENTAJE_DESCUENTO_APLICADO decimal(18,2),
	TOTAL_DESCUENTO_PROMOS_APLICADO decimal(18,2)
);
GO

--CREACION PROCEDURES DE MIGRACION------------------------------------------------------------
CREATE PROCEDURE LAMBDA.BI_migrar_tiempos
AS
BEGIN
    INSERT INTO LAMBDA.BI_dim_tiempos(AÑO, CUATRIMESTRE, MES)
    SELECT DISTINCT YEAR(TICKET_FECHA_HORA),
           CASE
               WHEN MONTH(TICKET_FECHA_HORA) BETWEEN 1 AND 4 THEN 1
               WHEN MONTH(TICKET_FECHA_HORA) BETWEEN 5 AND 8 THEN 2
               WHEN MONTH(TICKET_FECHA_HORA) BETWEEN 9 AND 12 THEN 3
           END AS CUATRIMESTRE,
           MONTH(TICKET_FECHA_HORA)
    FROM LAMBDA.Ticket
	ORDER BY YEAR(TICKET_FECHA_HORA),MONTH(TICKET_FECHA_HORA)
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_localidades
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_localidades(LOCALIDAD)
	SELECT LOCALIDAD_NOMBRE
	FROM LAMBDA.Localidad
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_provincias
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_provincias(PROVINCIA)
	SELECT PROVINCIA_NOMBRE
	FROM LAMBDA.Provincia
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_sucursales
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_sucursales(CODIGO_SUCURSAL, DIRECCION, LOCALIDAD, PROVINCIA)
	SELECT SUCURSAL_NOMBRE,SUCURSAL_DIRECCION,SUCURSAL_LOCALIDAD,SUCURSAL_PROVINCIA
	FROM LAMBDA.Sucursal
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_cajas
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_cajas(CAJA_NUMERO, CAJA_SUCURSAL, CAJA_TIPO)
	SELECT CAJA_NUMERO,CAJA_SUCURSAL,CAJA_TIPO
	FROM LAMBDA.caja
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_clientes
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_clientes(NOMBRE, APELLIDO, DNI, FECHA_REGISTRO,TELEFONO,MAIL,FECHA_NACIMIENTO,DOMICILIO,LOCALIDAD,PROVINCIA)
	SELECT CLIENTE_NOMBRE,CLIENTE_APELLIDO,CLIENTE_DNI,CLIENTE_FECHA_REGISTRO,CLIENTE_TELEFONO,CLIENTE_MAIL,CLIENTE_FECHA_NACIMIENTO,CLIENTE_DOMICILIO,CLIENTE_LOCALIDAD,CLIENTE_PROVINCIA
	FROM LAMBDA.Cliente
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_rangos_etarios
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_rangos_etarios(RANGO_DETALLE) VALUES 
    ('< 25'),
    ('25 - 35'),
    ('35 - 50'),
    ('> 50');
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_turnos
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_turnos(TURNO_DETALLE) VALUES 
    ('08:00 - 12:00'),
    ('12:00 - 16:00'),
    ('16:00 - 20:00'),
    ('otro');
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_medios_pago
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_medios_pago(MP_DETALLE,MP_TIPO)
	SELECT MP_DETALLE,MP_TIPO
	FROM LAMBDA.Medio_Pago
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_categorias
AS
BEGIN
	INSERT INTO LAMBDA.BI_dim_categorias(CATEG_CODIGO,CATEG_DESCRIPCION)
	SELECT CATEG_CODIGO,CATEG_DESCRIPCION
	FROM LAMBDA.Categoria
END
GO
CREATE PROCEDURE LAMBDA.BI_migrar_ventas
AS
BEGIN
    INSERT INTO LAMBDA.BI_fact_ventas(
        SUCURSAL,
        TIEMPO,
        TURNO,
        RANGO_ETARIO_EMPLEADO,
        CAJA_NUMERO,
		CANTIDAD_TOTAL_VENTAS,
		PROMEDIO_PRECIO_VENTAS,
		PROMEDIO_CANTIDAD_PRODUCTOS
    )
    SELECT 
        t.TICKET_SUCURSAL,
		ti.CODIGO_TIEMPO,
        LAMBDA.getTurn(t.TICKET_FECHA_HORA),
        LAMBDA.getAgeRange(LAMBDA.getAge(e.EMPLEADO_FECHA_NACIMIENTO)) AS RANGO_ETARIO_EMPLEADO,
		t.TICKET_CAJA_NUMERO,
		count(distinct t.TICKET_NUMERO),
		avg(td.TICKET_DET_PRECIO),
		avg(td.TICKET_DET_CANTIDAD)
    FROM LAMBDA.Ticket t JOIN LAMBDA.Ticket_Detalle td ON t.TICKET_NUMERO = td.TICKET_DET_NUMERO AND t.TICKET_SUCURSAL = td.TICKET_DET_SUCURSAL AND t.TICKET_TIPO_COMPROBANTE = td.TICKET_DET_COMPROBANTE AND t.TICKET_CAJA_NUMERO = td.TICKET_DET_CAJA
						JOIN LAMBDA.BI_dim_tiempos ti ON YEAR(t.TICKET_FECHA_HORA) = ti.AÑO AND MONTH(t.TICKET_FECHA_HORA) = ti.MES
						JOIN LAMBDA.Empleado e ON t.TICKET_EMPLEADO = e.EMPLEADO_LEGAJO
	GROUP BY t.TICKET_SUCURSAL,
			ti.CODIGO_TIEMPO,
			LAMBDA.getTurn(t.TICKET_FECHA_HORA),
			LAMBDA.getAgeRange(LAMBDA.getAge(e.EMPLEADO_FECHA_NACIMIENTO)),
			t.TICKET_CAJA_NUMERO
END;
GO
CREATE PROCEDURE LAMBDA.BI_migrar_envios
AS
BEGIN
	SET ANSI_WARNINGS OFF;
	INSERT INTO LAMBDA.BI_fact_envios(SUCURSAL, TIEMPO, RANGO_ETARIO_CLIENTES, CLIENTE, PORCENTAJE_ENVIOS_CUMPLIDOS, CANT_TOTAL_ENVIOS, COSTO_TOTAL_ENVIOS)
	SELECT e.ENVIO_TICKET_SUCURSAL,
		   ti.CODIGO_TIEMPO,
		   LAMBDA.getAgeRange(LAMBDA.getAge(c.FECHA_NACIMIENTO)),
		   e.ENVIO_CLIENTE,
		   COUNT(CASE WHEN e.ENVIO_FECHA_ENTREGA <= e.ENVIO_FECHA_PROGRAMADA THEN 1 END) * 100.0 / COUNT(e.ENVIO_TICKET_NUMERO) AS PORCENTAJE_ENVIOS_CUMPLIDOS,
		   COUNT(DISTINCT e.ENVIO_TICKET_NUMERO) AS CANT_TOTAL_ENVIOS,
		   SUM(e.ENVIO_COSTO) AS COSTO_TOTAL_ENVIOS
	FROM LAMBDA.Envio e 
	JOIN LAMBDA.BI_dim_clientes c ON e.ENVIO_CLIENTE = c.CODIGO
	JOIN LAMBDA.BI_dim_tiempos ti ON YEAR(e.ENVIO_FECHA_ENTREGA) = ti.AÑO AND MONTH(e.ENVIO_FECHA_ENTREGA) = ti.MES
	GROUP BY e.ENVIO_TICKET_SUCURSAL,
		     ti.CODIGO_TIEMPO,
		     LAMBDA.getAgeRange(LAMBDA.getAge(c.FECHA_NACIMIENTO)),
		     e.ENVIO_CLIENTE;
	SET ANSI_WARNINGS on;
END;
GO
CREATE PROCEDURE LAMBDA.BI_migrar_pagos
AS
BEGIN
	INSERT INTO LAMBDA.BI_fact_pagos(SUCURSAL,MEDIO_PAGO,TIEMPO,RANGO_ETARIO_CLIENTES,IMPORTE_TOTAL_CUOTAS,PROMEDIO_IMPORTE_CUOTAS)
	SELECT p.PAGO_TICKET_SUCURSAL,
		   p.PAGO_MEDIO_PAGO,
		   ti.CODIGO_TIEMPO,
		   LAMBDA.getAgeRange(LAMBDA.getAge(c.FECHA_NACIMIENTO)),
		   sum(p.PAGO_IMPORTE),
		   avg(p.PAGO_IMPORTe)
	FROM LAMBDA.Pago p right join LAMBDA.Pago_Tarjeta pj on p.PAGO_NUMERO = pj.PAGO_NUMERO
						JOIN LAMBDA.BI_dim_tiempos ti ON YEAR(p.PAGO_FECHA) = ti.AÑO AND MONTH(p.PAGO_FECHA) = ti.MES
							JOIN LAMBDA.BI_dim_clientes c ON pj.PAGO_CLIENTE = c.CODIGO
	GROUP BY p.PAGO_TICKET_SUCURSAL,
		   p.PAGO_MEDIO_PAGO,
		   ti.CODIGO_TIEMPO,
		   LAMBDA.getAgeRange(LAMBDA.getAge(c.FECHA_NACIMIENTO))
END
GO    
CREATE PROCEDURE LAMBDA.BI_migrar_descuentos
AS
BEGIN
	SET ANSI_WARNINGS OFF;
    INSERT INTO LAMBDA.BI_fact_descuentos(TIEMPO, CATEGORIA, MEDIO_PAGO,PORCENTAJE_DESCUENTO_APLICADO, TOTAL_DESCUENTO_PROMOS_APLICADO)
	SELECT 
		ti.CODIGO_TIEMPO,
		pc.PRODUCTO_CATEGORIA,
		p.PAGO_MEDIO_PAGO,
		AVG(d.DESCUENTO_PORCENTAJE_DESC) AS PORCENTAJE_DESCUENTO_APLICADO,
		SUM(pa.PROMO_APLICADA_DESCUENTO) AS TOTAL_DESCUENTO_PROMOS_APLICADO
	FROM 
		LAMBDA.Pago p 
		JOIN LAMBDA.BI_dim_tiempos ti on year(p.PAGO_FECHA)=ti.AÑO and month(p.PAGO_FECHA)=ti.MES
		JOIN LAMBDA.Descuento d 
			ON p.PAGO_DESCUENTO = d.DESCUENTO_CODIGO
		JOIN LAMBDA.Ticket t
			ON p.PAGO_TICKET_NUMERO = t.TICKET_NUMERO 
			AND p.PAGO_TICKET_SUCURSAL = t.TICKET_SUCURSAL 
			AND p.PAGO_TICKET_COMPROBANTE = t.TICKET_TIPO_COMPROBANTE 
			AND p.PAGO_TICKET_CAJA = t.TICKET_CAJA_NUMERO
		JOIN LAMBDA.Ticket_Detalle td 
			ON p.PAGO_TICKET_NUMERO = td.TICKET_DET_NUMERO 
			AND p.PAGO_TICKET_SUCURSAL = td.TICKET_DET_SUCURSAL 
			AND p.PAGO_TICKET_COMPROBANTE = td.TICKET_DET_COMPROBANTE 
			AND p.PAGO_TICKET_CAJA = td.TICKET_DET_CAJA
		JOIN LAMBDA.Producto_Marca pm 
			ON td.PRODUCTO_CODIGO = pm.PRODUCTO_CODIGO
		JOIN LAMBDA.Producto pr 
			ON pm.PRODUCTO_NOMBRE = pr.PRODUCTO_NOMBRE
		JOIN LAMBDA.Producto_Categoria pc 
			ON pr.PRODUCTO_NOMBRE = pc.PRODUCTO_NOMBRE
		LEFT JOIN LAMBDA.Promo_Aplicada pa 
			ON p.PAGO_TICKET_NUMERO = pa.TICKET_NUMERO
			AND p.PAGO_TICKET_SUCURSAL = pa.TICKET_SUCURSAL 
			AND p.PAGO_TICKET_COMPROBANTE = pa.TICKET_TIPO_COMPROBANTE 
			AND p.PAGO_TICKET_CAJA = pa.TICKET_CAJA
			AND pm.PRODUCTO_CODIGO= pa.TICKET_PRODUCTO
	WHERE pc.PRODUCTO_CATEGORIA IS NOT NULL
	GROUP BY 
		ti.CODIGO_TIEMPO,
		pc.PRODUCTO_CATEGORIA,p.PAGO_MEDIO_PAGO
	order by ti.CODIGO_TIEMPO,pc.PRODUCTO_CATEGORIA
	SET ANSI_WARNINGS ON;
END
GO
--CREACION DE VISTAS------------------------------------------------
CREATE VIEW LAMBDA.v_ticketPromedioMensual AS
SELECT l.LOCALIDAD,t.AÑO, t.MES, avg(fv.PROMEDIO_PRECIO_VENTAS) AS PROMEDIO_PRECIO_MENSUAL
FROM LAMBDA.BI_fact_ventas fv JOIN LAMBDA.BI_dim_sucursales s ON fv.SUCURSAL = s.CODIGO_SUCURSAL
							  JOIN LAMBDA.BI_dim_localidades l ON s.LOCALIDAD = l.CODIGO_LOCALIDAD
							  JOIN LAMBDA.BI_dim_tiempos t ON fv.TIEMPO = t.CODIGO_TIEMPO
group by l.LOCALIDAD,t.AÑO, t.MES
GO
CREATE VIEW LAMBDA.v_cantUnidadesPromedio AS 
SELECT tn.TURNO_DETALLE,t.CUATRIMESTRE, avg(fv.PROMEDIO_CANTIDAD_PRODUCTOS) as PROMEDIO_CANTIDAD_PRODUCTOS
FROM LAMBDA.BI_fact_ventas fv JOIN LAMBDA.BI_dim_tiempos t ON fv.TIEMPO = t.CODIGO_TIEMPO
							  JOIN LAMBDA.BI_dim_turnos tn ON fv.TURNO = CODIGO_TURNO
group by tn.TURNO_DETALLE,t.CUATRIMESTRE
GO
CREATE VIEW LAMBDA.v_porcVentasxEdad AS
SELECT 
	t.AÑO,
    t.CUATRIMESTRE,
    re.RANGO_DETALLE,
    ca.CAJA_TIPO,
    SUM(fv.CANTIDAD_TOTAL_VENTAS) * 100.0 / (select sum(CANTIDAD_TOTAL_VENTAS) 
											 from LAMBDA.BI_fact_ventas JOIN LAMBDA.BI_dim_tiempos ON TIEMPO = CODIGO_TIEMPO
											 where AÑO=t.AÑO) AS PORCENTAJE_VENTAS
FROM LAMBDA.BI_fact_ventas fv
JOIN LAMBDA.BI_dim_tiempos t ON fv.TIEMPO = t.CODIGO_TIEMPO
JOIN LAMBDA.BI_dim_rangos_etarios re ON fv.RANGO_ETARIO_EMPLEADO = re.CODIGO_RANGO
JOIN LAMBDA.BI_dim_cajas ca ON fv.CAJA_NUMERO = ca.CAJA_NUMERO
GROUP BY t.AÑO, t.CUATRIMESTRE, re.RANGO_DETALLE,ca.CAJA_TIPO
GO
CREATE VIEW LAMBDA.v_cantVentasTurnoLocalidad AS
SELECT t.MES, t.AÑO,tn.TURNO_DETALLE,l.LOCALIDAD,sum(fv.CANTIDAD_TOTAL_VENTAS) AS CANTIDAD_VENTAS
FROM LAMBDA.BI_fact_ventas fv JOIN LAMBDA.BI_dim_tiempos t ON fv.TIEMPO = t.CODIGO_TIEMPO
							  JOIN LAMBDA.BI_dim_turnos tn ON fv.TURNO = tn.CODIGO_TURNO
							  JOIN LAMBDA.BI_dim_sucursales s ON fv.SUCURSAL = s.CODIGO_SUCURSAL 
							  JOIN LAMBDA.BI_dim_localidades l ON s.LOCALIDAD = l.CODIGO_LOCALIDAD
group by t.MES, t.AÑO,tn.TURNO_DETALLE,l.LOCALIDAD
GO
CREATE VIEW LAMBDA.v_porcentajeDescuentoMes AS
SELECT
    t.AÑO, t.MES,
    avg(fd.PORCENTAJE_DESCUENTO_APLICADO) AS PORCENTAJE_DESCUENTO_APLICADO
FROM LAMBDA.BI_fact_descuentos fd JOIN LAMBDA.BI_dim_tiempos t ON fd.TIEMPO = t.CODIGO_TIEMPO
GROUP BY t.AÑO, t.MES;
GO
CREATE VIEW LAMBDA.v_top3CategsProdsMayorDesc AS
SELECT TOP 3 t.AÑO,t.CUATRIMESTRE, fd.CATEGORIA, SUM(fd.TOTAL_DESCUENTO_PROMOS_APLICADO) AS TOTAL_DESCUENTO_PROMOS_APLICADO
FROM LAMBDA.BI_fact_descuentos fd JOIN LAMBDA.BI_dim_tiempos t ON fd.TIEMPO = t.CODIGO_TIEMPO
GROUP BY t.AÑO,t.CUATRIMESTRE,fd.CATEGORIA
ORDER BY TOTAL_DESCUENTO_PROMOS_APLICADO desc
GO
CREATE VIEW LAMBDA.v_porcEnviosCumplidos AS
SELECT SUCURSAL, t.AÑO AS Año,t.MES AS Mes,AVG(PORCENTAJE_ENVIOS_CUMPLIDOS) as PORCENTAJE_ENVIOS_CUMPLIDOS
FROM LAMBDA.BI_fact_envios e JOIN LAMBDA.BI_dim_tiempos t ON e.TIEMPO = t.CODIGO_TIEMPO
GROUP BY SUCURSAL, t.AÑO, t.MES
GO
CREATE VIEW LAMBDA.v_cantEnvRangoEtCuatriAño AS
SELECT re.RANGO_DETALLE,t.AÑO AS Anio,t.CUATRIMESTRE as Cuatrimestre,sum(fe.CANT_TOTAL_ENVIOS) AS Cantidad_Envios
FROM LAMBDA.BI_fact_envios fe JOIN LAMBDA.BI_dim_rangos_etarios re ON fe.RANGO_ETARIO_CLIENTES = re.CODIGO_RANGO
							  JOIN LAMBDA.BI_dim_tiempos t ON fe.TIEMPO = t.CODIGO_TIEMPO
GROUP BY re.RANGO_DETALLE,t.AÑO,t.CUATRIMESTRE;
GO
CREATE VIEW LAMBDA.v_top5LocalidadesEnvioCaro AS
SELECT TOP 5 l.LOCALIDAD,SUM(e.COSTO_TOTAL_ENVIOS) AS Total_Costo_Envio
FROM LAMBDA.BI_fact_envios e JOIN LAMBDA.BI_dim_clientes c ON e.CLIENTE = c.CODIGO
							 JOIN LAMBDA.BI_dim_localidades l ON c.LOCALIDAD = l.CODIGO_LOCALIDAD
GROUP BY l.LOCALIDAD
ORDER BY Total_Costo_Envio DESC;
GO
CREATE VIEW LAMBDA.v_top3SucursalesMayorPagoCuotas AS
SELECT TOP 3 SUCURSAL, t.AÑO, t.MES, mp.MP_DETALLE, SUM(IMPORTE_TOTAL_CUOTAS) AS IMPORTE_TOTAL_CUOTAS
FROM LAMBDA.BI_fact_pagos p JOIN LAMBDA.BI_dim_medios_pago mp ON p.MEDIO_PAGO = mp.MP_CODIGO
							JOIN LAMBDA.BI_dim_tiempos t ON p.TIEMPO = t.CODIGO_TIEMPO
GROUP BY SUCURSAL, t.AÑO, t.MES, mp.MP_DETALLE
ORDER BY IMPORTE_TOTAL_CUOTAS DESC;
GO
CREATE VIEW LAMBDA.v_promedioCuotaEdadCliente AS
SELECT re.RANGO_DETALLE AS RANGO_ETARIO_CLIENTE,  AVG(PROMEDIO_IMPORTE_CUOTAS) AS PROMEDIO_IMPORTE_CUOTAS
FROM LAMBDA.BI_fact_pagos p JOIN LAMBDA.BI_dim_rangos_etarios re ON p.RANGO_ETARIO_CLIENTES = re.CODIGO_RANGO
GROUP BY re.RANGO_DETALLE
GO
CREATE VIEW LAMBDA.v_descApliPorMedioPago AS
SELECT 
    t.AÑO,
    t.CUATRIMESTRE,
	mp.MP_TIPO,
    avg(d.PORCENTAJE_DESCUENTO_APLICADO) as PORCENTAJE_DESCUENTO_PAGOS
FROM LAMBDA.BI_fact_descuentos d
    JOIN LAMBDA.BI_dim_tiempos t ON d.TIEMPO = t.CODIGO_TIEMPO
    JOIN LAMBDA.BI_dim_medios_pago mp ON d.MEDIO_PAGO = d.MEDIO_PAGO
group by t.AÑO,
    t.CUATRIMESTRE,
	mp.MP_TIPO
GO

--EJECUCIÓN DE PROCEDURES: MIGRACIÓN DE MODELO OLTP A MODELO BI
 BEGIN TRANSACTION
 BEGIN TRY
	EXECUTE LAMBDA.BI_migrar_tiempos
	EXECUTE LAMBDA.BI_migrar_localidades
	EXECUTE LAMBDA.BI_migrar_provincias
	EXECUTE LAMBDA.BI_migrar_sucursales
	EXECUTE LAMBDA.BI_migrar_cajas
	EXECUTE LAMBDA.BI_migrar_clientes
	EXECUTE LAMBDA.BI_migrar_rangos_etarios
	EXECUTE LAMBDA.BI_migrar_turnos
	EXECUTE LAMBDA.BI_migrar_medios_pago
	EXECUTE LAMBDA.BI_migrar_categorias
	EXECUTE LAMBDA.BI_migrar_ventas
	EXECUTE LAMBDA.BI_migrar_envios
	EXECUTE LAMBDA.BI_migrar_pagos
	EXECUTE LAMBDA.BI_migrar_descuentos
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION;
	THROW 50001, 'Error al cargar el modelo de BI, ninguna tabla fue cargada',1;
END CATCH


   
GO


--PRUEBA DE LAS VISTAS------------------------------------------------------------
/*
SELECT * FROM LAMBDA.v_ticketPromedioMensual
SELECT * FROM LAMBDA.v_cantUnidadesPromedio
SELECT * FROM LAMBDA.v_porcVentasxEdad
SELECT * FROM LAMBDA.v_cantVentasTurnoLocalidad
SELECT * FROM LAMBDA.v_porcentajeDescuentoMes
SELECT * FROM LAMBDA.v_top3CategsProdsMayorDesc
SELECT * FROM LAMBDA.v_porcEnviosCumplidos
SELECT * FROM LAMBDA.v_cantEnvRangoEtCuatriAño
SELECT * FROM LAMBDA.v_top5LocalidadesEnvioCaro
SELECT * FROM LAMBDA.v_top3SucursalesMayorPagoCuotas
SELECT * FROM LAMBDA.v_promedioCuotaEdadCliente
SELECT * FROM LAMBDA.v_descApliPorMedioPago
*/